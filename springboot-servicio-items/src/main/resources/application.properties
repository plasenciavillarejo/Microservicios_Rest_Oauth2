configuracion.texto= Ejecutando por defecto el fichero application.properties dentro de el proyecto
spring.application.name=servicio-items
server.port=8002

### Balanceador de carga 'Ribbon', podremos indicar varias instancias de puertos para que redirija a uno u otro según la carga que contenga la aplicación
# Se comenta por que al utilizar EUREKA automáticamente se registra todo por defecto sin necesidad de indicarle el puerto
#servicio-productos.ribbon.listOfServers=localhost:8001,localhost:9001

# Indicamos cual es nuestro servidor EUREKA
###########################################

###########################################################################################################################################################
# Tengo que indicar la instancia de hostname o no me podrá resolver el nombre -> (resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1013)
###########################################################################################################################################################
eureka.instance.hostname=localhost
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:8761/eureka

##############################################
# Configuración de TimeOut de Hystrix y Ribbon
##############################################
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds= 20000
#ribbon.ConnectTimeout= 3000
#ribbon.ReadTimeout= 10000


#######################################################################################
# Configuracion de SpringConfig necesario desde la versión 2.4 en adelante
# Está configuración tiene que ver con la dependencia -> spring-cloud-starter-bootstrap
# Se utiliza para especificar que la aplicación puede importar su configuración desde un servidor de configuración, si está disponible, pero también puede funcionar sin él.
#######################################################################################
#spring.config.import=optional:configserver:

##############################################
# Configuración Resilience4j en el properties.
##############################################
resilience4j.circuitbreaker.configs.defecto.sliding-window-size=6
resilience4j.circuitbreaker.configs.defecto.failure-rate-threshold=50
resilience4j.circuitbreaker.configs.defecto.wait-duration-in-open-state=20s
resilience4j.circuitbreaker.configs.defecto.permitted-number-of-calls-in-half-open-state=4
resilience4j.circuitbreaker.configs.defecto.slow-call-rate-threshold=50
resilience4j.circuitbreaker.configs.defecto.slow-call-duration-threshold=2s
# Se define la instancia 'items' que es la indicaca en la etiqueta @CircuitBreaker(name="items")
resilience4j.circuitbreaker.instances.items.base-config=defecto
# TimeOut de Resilience, si lo configuramos en 2s, si no se ejecuta en ese tiempo se ejecutara 'metodoAlternativoTimeLimiter()'
resilience4j.timelimiter.configs.defecto.timeout-duration=2s
resilience4j.timelimiter.instances.items.base-config=defecto



##########################
## Configuración Zipkin ##
##########################

#Probabilidad en las que va a enviar las trazas, por defecto es un 10%, lo cambiamos a 1%
spring.sleuth.sampler.probability=1.0
# Opcional configurar la ruta de zipkin, por defecto lo va a buscar en la misma ruta -> http://localhost:9411/
spring.zipkin.base-url=http://localhost:9411/
# Para que envíe las trazas a RABBIT se debe de indicar lo siguiente
spring.zipkin.sender.type=rabbit

