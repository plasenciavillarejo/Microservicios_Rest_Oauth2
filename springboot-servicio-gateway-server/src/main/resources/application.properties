spring.application.name=servicio-gateway-server
server.port=8090

# Indicamos cual es nuestro servidor EUREKA
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

###########################################################################
## Gateway viene a sustituir el proyecto SPRINGBOOT-SERVICIO-ZUUL-SERVER ##
###########################################################################

###############################################
## Mapping de las Rutas Spring Cloud Gateway ##
###############################################


## 1.-Servicio-productos ##
###########################
spring.cloud.gateway.routes[0].id=servicio-productos
spring.cloud.gateway.routes[0].uri=lb://servicio-productos
# Los predicates son reglas que se tiene que cumplir para poder visualizar esos recursos -> Si no cumple nada de esto devolverá un 404 not found
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/productos/**

##############################################################################################################################################
# 					                                 CONFIGURACIÓN PREDICATES   - Parámetros en el Request                                   #
# Nota: Si alguno de estos parámetros no está configurado en POSTMAN no podremos visualizar la respuesta de el ENDPOINT nos devolverá un 404.#
##############################################################################################################################################
# Vamos a indicar que solo estará disponilbe si el header contiene algun token en formato de digito
#spring.cloud.gateway.routes[0].predicates[1]=Header=token, 123456
# Si no contiene Applicatin/json no mostrará nada -> Al ser una peticion request esto no estará, debemo incluirlo nosotros desde postman
#spring.cloud.gateway.routes[0].predicates[2]=Header=Content-type, application/json
# Solo permitirá que sea métodos GET o POST
#spring.cloud.gateway.routes[0].predicates[3]=Method=GET, POST
# Que envíe un parámetor en la URL con el color = verder
#spring.cloud.gateway.routes[0].predicates[4]=Query=color, verde
#spring.cloud.gateway.routes[0].predicates[5]=Cookie=color, azul
###############################################################################################################################################

##############################################################################################################################################
# 					                                 CONFIGURACIÓN FILTROS                                                                   #
##############################################################################################################################################
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=2
# Añadimos atributos dentro de la clase EjemploGatewayFilterFactory, Solo hay que indicar el nombre de la clase 'Ejemplo' seguido de el mensaje + el valor de la cookie.
# Se le indica los atributos tal y como está descrito en la clase Configuracion() utilizando el método (shortcutFieldOrder)
#spring.cloud.gateway.routes[0].filters[1]=Ejemplo=Mensaje personalizado,usuario,JosePlasencia

# Cambiando el nombre de el filtro desde la clase 'EjemploGatewayFilterFactory.java'
# NOta: al Configurar CircuitBreaker este filtro tiene que ir despues, en caso contrario nunca funcionará
spring.cloud.gateway.routes[0].filters[2]=EjemploNombreCambiado=Mensaje personalizado,usuario,JosePlasencia

# Añadimos otro filtro para el uso de Resilience - Es un filtro especial que viene de fabrica en Spring Cloud Gateway
# Simplemente llamamos al filtro y lo utilizamos.
# Ahora mismo solo se va a aplicar en el Time Out -> CircuitBreaker=productos
#spring.cloud.gateway.routes[0].filters[2]=CircuitBreaker=productos

# Para que funcione con tolerancia a fallos tenemos que hacer la siguiente configuración
spring.cloud.gateway.routes[0].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[1].args.name=productos
#Tenmos un atributo para el status code: 500 cuando se llama al id 10
#Al llamar al enpoint veremos que nos da un error 500, cuando superamos el umbral entramos en cortocircuito
spring.cloud.gateway.routes[0].filters[1].args.statusCodes=500
# Para Manejar caminos alternativos agregamos el fallbackUri, no se puede redirigir al enpoint /api/productos/** ya que  
# queda deshabilitado y va a estár redirigiendo de forma recurisva a un endpoint que está en cortocircuito
spring.cloud.gateway.routes[0].filters[1].args.fallbackUri=forward:/api/items/ver/9/cantidad/5
																

# Se le indica por parámetro cada filtro (Funciona)
#spring.cloud.gateway.routes[0].filters[1].name=Ejemplo
#spring.cloud.gateway.routes[0].filters[1].args.mensaje=Mensaje personalizado
#spring.cloud.gateway.routes[0].filters[1].args.cookieNombre=JosePlasencia
#spring.cloud.gateway.routes[0].filters[1].args.cookieValor=usuario
###############################################################################################################################################


#######################
## 2.-Servicio-Items ##
#######################
spring.cloud.gateway.routes[1].id=servicio-items
spring.cloud.gateway.routes[1].uri=lb://servicio-items
spring.cloud.gateway.routes[1].predicates=Path=/api/items/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=2

# Vamos añadir filtro que viene por defecto en la documentación de SPRING (Authorization, Content-type, Accept-Language, etc....) -> No se crea ninguna clase para ellos
# Para el ejemplo vamos añadir un toke, que le indicamos un nombre de ejemplo 'token-request', "valor"
spring.cloud.gateway.routes[1].filters[1]=AddRequestHeader=token-request,123456
spring.cloud.gateway.routes[1].filters[2]=AddResponseHeader=token-response,12345678
spring.cloud.gateway.routes[1].filters[4]=SetResponseHeader=Content-Type, application/json
#Filtro para pasar parámetros al Request
spring.cloud.gateway.routes[1].filters[3]=AddRequestParameter=nombreParametro, plasencia


##########################
## 3.-Servicio-Usuarios ##
##########################
spring.cloud.gateway.routes[2].id=servicio-usuarios
spring.cloud.gateway.routes[2].uri=lb://servicio-usuarios
spring.cloud.gateway.routes[2].predicates=Path=/api/usuarios/**
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=2


##########################
## 4.-Servicio-Oauth ##
##########################
spring.cloud.gateway.routes[3].id=servicio-oauths
spring.cloud.gateway.routes[3].uri=lb://servicio-oauth
spring.cloud.gateway.routes[3].predicates=Path=/api/security/**
spring.cloud.gateway.routes[3].filters[0]=StripPrefix=2


# Configuración importante cuando estamos utilizando de cliente el servidor de configuraciones. 
spring.config.import=optional:configserver:


##############################################
# Configuración Resilience4j en el properties.
##############################################
#Solo queremos 6 Requeste en la ventana deslizante inicial -> Esto quiere decir que tiene un máximo de 6 peticiones al request antes de entrar o no en circuito abierto
resilience4j.circuitbreaker.configs.defecto.sliding-window-size=6
# Umbral de % de fallos
resilience4j.circuitbreaker.configs.defecto.failure-rate-threshold=50
# Tiempo de espera despues de el cortocircuito
resilience4j.circuitbreaker.configs.defecto.wait-duration-in-open-state=20s
# Cambiamos el numero de llamadas en el circuito semi abierto, por defecto son 10 -> Cambiamos a 4
resilience4j.circuitbreaker.configs.defecto.permitted-number-of-calls-in-half-open-state=4
# Configuración de Llamdas lentas -> Configuramos el umbral de llamdas lenta en un 50%
resilience4j.circuitbreaker.configs.defecto.slow-call-rate-threshold=50
# Tiempo máximo que se puede demorar una llamada
resilience4j.circuitbreaker.configs.defecto.slow-call-duration-threshold=5s
# Se define la instancia 'productos' que es la indicaca en la etiqueta @CircuitBreaker(name="productos")
resilience4j.circuitbreaker.instances.productos.base-config=defecto
# TimeOut de Resilience, si lo configuramos en 2s, si no se ejecuta en ese tiempo se ejecutara 'metodoAlternativoTimeLimiter()'
resilience4j.timelimiter.configs.defecto.timeout-duration=2s
#Nombre de la etiqueta que se le indica -> resilience4j.circuitbreaker.configs.defecto
resilience4j.timelimiter.instances.productos.base-config=defecto

##########################
## Configuración Zipkin ##
##########################

#Probabilidad en las que va a enviar las trazas, por defecto es un 10%, lo cambiamos a 1%
spring.sleuth.sampler.probability=1.0
# Opcional configurar la ruta de zipkin, por defecto lo va a buscar en la misma ruta -> http://localhost:9411/
spring.zipkin.base-url=http://localhost:9411/
# Para que envíe las trazas a RABBIT se debe de indicar lo siguiente
spring.zipkin.sender.type=rabbit

